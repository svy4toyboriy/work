// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cut4cut/avito-test-work/internal/usecase (interfaces: AccountRepo)

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/svy4toyboriy/work/internal/entity"
)

// MockAccountRepo is a mock of AccountRepo interface.
type MockAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepoMockRecorder
}

// MockAccountRepoMockRecorder is the mock recorder for MockAccountRepo.
type MockAccountRepoMockRecorder struct {
	mock *MockAccountRepo
}

// NewMockAccountRepo creates a new mock instance.
func NewMockAccountRepo(ctrl *gomock.Controller) *MockAccountRepo {
	mock := &MockAccountRepo{ctrl: ctrl}
	mock.recorder = &MockAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepo) EXPECT() *MockAccountRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountRepo) Create(arg0 context.Context) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountRepo)(nil).Create), arg0)
}

// GetById mocks base method.
func (m *MockAccountRepo) GetById(arg0 context.Context, arg1 int64) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockAccountRepoMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockAccountRepo)(nil).GetById), arg0, arg1)
}

// GetHistory mocks base method.
func (m *MockAccountRepo) GetHistory(arg0 context.Context, arg1 int64, arg2, arg3 uint64, arg4 string, arg5 bool) ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockAccountRepoMockRecorder) GetHistory(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockAccountRepo)(nil).GetHistory), arg0, arg1, arg2, arg3, arg4, arg5)
}

// TransferAmount mocks base method.
func (m *MockAccountRepo) TransferAmount(arg0 context.Context, arg1, arg2 int64, arg3 float64) (entity.Account, entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferAmount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(entity.Account)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TransferAmount indicates an expected call of TransferAmount.
func (mr *MockAccountRepoMockRecorder) TransferAmount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferAmount", reflect.TypeOf((*MockAccountRepo)(nil).TransferAmount), arg0, arg1, arg2, arg3)
}

// UpdBalance mocks base method.
func (m *MockAccountRepo) UpdBalance(arg0 context.Context, arg1, arg2 int64, arg3 float64) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdBalance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdBalance indicates an expected call of UpdBalance.
func (mr *MockAccountRepoMockRecorder) UpdBalance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdBalance", reflect.TypeOf((*MockAccountRepo)(nil).UpdBalance), arg0, arg1, arg2, arg3)
}
